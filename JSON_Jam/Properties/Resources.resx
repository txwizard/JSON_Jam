<?xml version="1.0" encoding="utf-8"?>
<root>
  <!--
    Microsoft ResX Schema

    Version 2.0

    The primary goals of this format is to allow a simple XML format
    that is mostly human readable. The generation and parsing of the
    various data types are done through the TypeConverter classes
    associated with the data types.

    Example:

    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>

    There are any number of "resheader" rows that contain simple
    name/value pairs.

    Each data row contains a name, and value. The row also contains a
    type or mimetype. Type corresponds to a .NET class that support
    text/value conversion through the TypeConverter architecture.
    Classes that don't support this are serialized and stored with the
    mimetype set.

    The mimetype is used for serialized objects, and tells the
    ResXResourceReader how to depersist the object. This is currently not
    extensible. For a given mimetype the value must be set accordingly:

    Note - application/x-microsoft.net.object.binary.base64 is the format
    that the ResXResourceWriter will generate, however the reader can
    read any of the formats listed below.

    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="ERRMSG_CORRUPTED_EMBBEDDED_RESOURCE_LABEL" xml:space="preserve">
    <value>The label row of internal resource {0} is invalid.{3}    Expected value = {1}{3}    Actual value   = {2}</value>
    <comment>The private LoadMap routine uses this message to report a corrupted label row in its internal resource file.</comment>
  </data>
  <data name="ERRMSG_CORRUPTED_EMBEDDED_RESOURCE_DETAIL" xml:space="preserve">
    <value>Detail record {0} of internal resource {1} is invalid.{5}    Expected field count = {2}{5}    Actual field count   = {3}{5}    Actual record        = {4}</value>
    <comment>The private LoadMap routine uses this message to report a corrupted label row in its internal resource file.</comment>
  </data>
  <data name="FILE_LABEL_CONTENT_REPORT" xml:space="preserve">
    <value>Detailed Report File:  </value>
    <comment>The main routine sends this string to ShowFileDetails as the label to display in the message that it returns. NOTE: All report labels use trailing spaces to enforce vertical alignment of the details that follow.</comment>
  </data>
  <data name="FILE_LABEL_FINAL" xml:space="preserve">
    <value>Output File:           </value>
    <comment>The main routine sends this string to ShowFileDetails as the label to display in the message that it returns. NOTE: All report labels use trailing spaces to enforce vertical alignment of the details that follow.</comment>
  </data>
  <data name="FILE_LABEL_INPUT" xml:space="preserve">
    <value>Input File:            </value>
    <comment>The main routine sends this string to ShowFileDetails as the label to display in the message that it returns. NOTE: All report labels use trailing spaces to enforce vertical alignment of the details that follow.</comment>
  </data>
  <data name="FILE_LABEL_INTERMEDIATE" xml:space="preserve">
    <value>Intermediate File:     </value>
    <comment>The main routine sends this string to ShowFileDetails as the label to display in the message that it returns. NOTE: All report labels use trailing spaces to enforce vertical alignment of the details that follow.</comment>
  </data>
  <data name="MSG_AWAIT_CARBON_UNIT" xml:space="preserve">
    <value>Please press Return to fully stop the program.</value>
    <comment>The AwaitCarbonUnit method displays this message, then executes a ReadLine, causing it to wait for a carriage return.</comment>
  </data>
  <data name="MSG_RESPONSE_DETAILS_LABELS" xml:space="preserve">
    <value>Item\tActivity_Date\tOpen\tHigh\tLow\tClose\tAdjustedClose\tVolume\tDividendAmount\tSplitCoefficient</value>
    <comment>The main routine uses this template to construct a heading for the section that reports the details from the response.</comment>
  </data>
  <data name="MSG_RESPONSE_METADATA" xml:space="preserve">
    <value>Metadata from response: Information   = {0}{6}                        Symbol        = {1}{6}                        LastRefreshed = {2}{6}                        OutputSize    = {3}{6}                        TimeZone      = {4}{6}                        Detail Count  = {5}{6}</value>
    <comment>The ConsumeResponse method, defined in the main source module (Program.cs) uses this template to construct a message that reports the metadata from the response. NOTE: This is the longes label against which others must align at the colon in this label.</comment>
  </data>
  <data name="MSG_START" xml:space="preserve">
    <value>{0}, version {1}.{2},{5}{3} ({4} UTC){5}</value>
    <comment>The CreateStartupBanner method formats its message from this template.</comment>
  </data>
  <data name="MSG_STOP" xml:space="preserve">
    <value>{4}{0} Done, {1} ({2} UTC){4}Running time = {3}</value>
    <comment>Message template used by CreateShutdownBanner method</comment>
  </data>
</root>